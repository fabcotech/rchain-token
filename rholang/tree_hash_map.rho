// reimplementation of TreeHashMap
// Modification (1): line 265, if Nil is sent over "set", wi remove the
// from map key instead of setting nil
// Modification (2): line 9, line 69 etc. base 12 instead of base 256
// Modification (3): "getAllValues" method that iterates and returns values
// this is from rchain/casper/src/main/resources/Registry.rho
new MakeNode, ByteArrayToNybbleList,
    TreeHashMapSetter, TreeHashMapGetter, TreeHashMapGetterValues, TreeHashMapContains, TreeHashMapUpdater, HowManyPrefixes, NybbleListForI,
    powersCh, storeToken, nodeGet in {
  match ([1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,655256], ["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"], 12) {
    (powers, hexas, base) => {
      contract MakeNode(@initVal, @node) = {
        @[node, *storeToken]!(initVal)
      } |

      contract nodeGet(@node, ret) = {
        for (@val <<- @[node, *storeToken]) {
          ret!(val)
        }
      } |

      contract HowManyPrefixes(@map, ret) = {
        for (@depth <<- @(map, "depth")) {
          match depth {
            1 => ret!(base)
            2 => ret!(base * base)
            3 => ret!(base * base * base)
            4 => ret!(base * base * base * base)
          }
        }
      } |

      contract NybbleListForI(@map, @i, @depth, ret) = {
        match depth {
          1 => {
            match hexas.nth(i % base) {
              str => {
                ByteArrayToNybbleList!(str.hexToBytes(), 0, depth, [], *ret)
              }
            }
          }
          2 => {
            match hexas.nth(i / base) ++ hexas.nth(i % base) {
              str => {
                ByteArrayToNybbleList!(str.hexToBytes(), 0, depth, [], *ret)
              }
            }
          }
          3 => {
            match hexas.nth(i / base / base) ++ hexas.nth(i / base) ++ hexas.nth(i % base) {
              str => {
                ByteArrayToNybbleList!(str.hexToBytes(), 0, depth, [], *ret)
              }
            }
          }
          4 => {
            match hexas.nth(i / base / base / base) ++ hexas.nth(i / base / base) ++ hexas.nth(i / base) ++ hexas.nth(i % base) {
              str => {
                ByteArrayToNybbleList!(str.hexToBytes(), 0, depth, [], *ret)
              }
            }
          }
        }
      } |

      contract ByteArrayToNybbleList(@ba, @n, @len, @acc, ret) = {
        if (n == len) {
          ret!(acc)
        } else {
          ByteArrayToNybbleList!(ba, n+1, len, acc ++ [ ba.nth(n) % base ], *ret)
        }
      } |

      contract TreeHashMap(@"init", @depth, ret) = {
        new map in {
          MakeNode!(0, (*map, [])) |
          @(*map, "depth")!!(depth) |
          ret!(*map)
        }
      } |

      contract TreeHashMapGetterValues(@map, @nybList, @n, @len, ret) = {
        // Look up the value of the node at (map, nybList.slice(0, n + 1))
        new valCh in {
          nodeGet!((map, nybList.slice(0, n)), *valCh) |
          for (@val <- valCh) {
            if (n == len) {
              ret!(val)
            } else {
              // Otherwise check if the rest of the path exists.
              // Bit k set means node k exists.
              // nybList.nth(n) is the node number
              // val & powers.nth(nybList.nth(n)) is nonzero if the node exists
              // (val / powers.nth(nybList.nth(n))) % 2 is 1 if the node exists
              if ((val / powers.nth(nybList.nth(n))) % 2 == 0) {
                ret!(Nil)
              } else {
                TreeHashMapGetterValues!(map, nybList, n + 1, len, *ret)
              }
            }
          }
        }
      } |

      contract TreeHashMapGetter(@map, @nybList, @n, @len, @suffix, ret) = {
        // Look up the value of the node at (map, nybList.slice(0, n + 1))
        new valCh in {
          nodeGet!((map, nybList.slice(0, n)), *valCh) |
          for (@val <- valCh) {
            if (n == len) {
              ret!(val.get(suffix))
            } else {
              // Otherwise check if the rest of the path exists.
              // Bit k set means node k exists.
              // nybList.nth(n) is the node number
              // val & powers.nth(nybList.nth(n)) is nonzero if the node exists
              // (val / powers.nth(nybList.nth(n))) % 2 is 1 if the node exists
              if ((val / powers.nth(nybList.nth(n))) % 2 == 0) {
                ret!(Nil)
              } else {
                TreeHashMapGetter!(map, nybList, n + 1, len, suffix, *ret)
              }
            }
          }
        }
      } |

      contract TreeHashMap(@"get", @map, @key, ret) = {
        new hashCh, nybListCh, keccak256Hash(`rho:crypto:keccak256Hash`) in {
          // Hash the key to get a 256-bit array
          keccak256Hash!(key.toByteArray(), *hashCh) |
          for (@hash <- hashCh) {
            for (@depth <<- @(map, "depth")) {
              // Get the bit list
              ByteArrayToNybbleList!(hash, 0, depth, [], *nybListCh) |
              for (@nybList <- nybListCh) {
                TreeHashMapGetter!(map, nybList, 0,  depth, hash.slice(depth, 32), *ret)
              }
            }
          }
        }
      } |
  
      contract TreeHashMap(@"remove", @map, @key, ret) = {
        new hashCh, nybListCh, keccak256Hash(`rho:crypto:keccak256Hash`) in {
          // Hash the key to get a 256-bit array
          keccak256Hash!(key.toByteArray(), *hashCh) |
          for (@hash <- hashCh) {
            for (@depth <<- @(map, "depth")) {
              // Get the bit list
              ByteArrayToNybbleList!(hash, 0, depth, [], *nybListCh) |
              for (@nybList <- nybListCh) {
                TreeHashMapGetter!(map, nybList, 0,  depth, hash.slice(depth, 32), *ret)
              }
            }
          }
        }
      } |

      contract TreeHashMap(@"getAllValues", @map, ret) = {
        new hashCh, resultCh, howManyPrefixesCh, iterateOnPrefixesCh, iterateOnKeysCh, nybListCh, keccak256Hash(`rho:crypto:keccak256Hash`) in {
          HowManyPrefixes!(map, *howManyPrefixesCh) |
          for (@depth <<- @(map, "depth")) {
            for (@howManyPrefixes <- howManyPrefixesCh ) {
              contract iterateOnKeysCh(@mmap, return) = {
                new itCh in {
                  for (@(i, keys, arr) <= itCh) {
                    match keys {
                      Set() => {
                        return!(arr)
                      }
                      Set(last) => {
                        return!(arr ++ [mmap.get(last)])
                      }
                      Set(first...rest) => {
                        itCh!((i + 1, rest, arr ++ [mmap.get(first)]))
                      }
                    }
                  } |
                  itCh!((0, mmap.keys(), []))
                }
              } |

              contract iterateOnPrefixesCh(return) = {
                new itCh in {
                  for (@(i, arr) <= itCh) {
                    match i <= howManyPrefixes - 1 {
                      false => {
                        return!(arr)
                      }
                      true => {
                        NybbleListForI!(map, i, depth, *nybListCh) |
                        for (@nybList <- nybListCh) {
                          new valuesCh, arrCh in {
                            TreeHashMapGetterValues!(map, nybList, 0,  depth, *valuesCh) |
                            for (@values <- valuesCh) {
                              // nothing found with this prefix
                              if (values == Nil) {
                                itCh!((i + 1, arr))
                              } else {
                                iterateOnKeysCh!(values, *arrCh) |
                                for (@a <- arrCh) {
                                  itCh!((i + 1, arr ++ a))
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  } |
                  itCh!((0, []))
                }
              } |

              iterateOnPrefixesCh!(*resultCh) |

              for (@allValues <- resultCh) {
                ret!(allValues)
              }
            }
          }
        }
      } |

      // Doesn't walk the path, just tries to fetch it directly.
      // Will hang if there's no key with that 64-bit prefix.
      // Returns Nil like "get" does if there is some other key with
      // the same prefix but no value there.
      contract TreeHashMap(@"fastUnsafeGet", @map, @key, ret) = {
        new hashCh, nybListCh, keccak256Hash(`rho:crypto:keccak256Hash`) in {
          // Hash the key to get a 256-bit array
          keccak256Hash!(key.toByteArray(), *hashCh) |
          for (@hash <- hashCh) {
            for(@depth <<- @(map, "depth")) {
              // Get the bit list
              ByteArrayToNybbleList!(hash, 0, depth, [], *nybListCh) |
              for (@nybList <- nybListCh) {
                new restCh, valCh in {
                  nodeGet!((map, nybList), *restCh) |
                  for (@rest <- restCh) {
                    ret!(rest.get(hash.slice(depth, 32)))
                  }
                }
              }
            }
          }
        }
      } |

      contract TreeHashMapSetter(@map, @nybList, @n, @len, @newVal, @suffix, ret) = {
        // Look up the value of the node at (map, nybList.slice(0, n + 1))
        new valCh, restCh in {
          match (map, nybList.slice(0, n)) {
            node => {
              for (@val <<- @[node, *storeToken]) {
                if (n == len) {
                  // Acquire the lock on this node
                  for (@val <- @[node, *storeToken]) {
                    // If we're at the end of the path, set the node to newVal.
                    if (val == 0) {
                      // Release the lock
                      @[node, *storeToken]!({suffix: newVal}) |
                      // Return
                      ret!(Nil)
                    }
                    else {
                      // Release the lock
                      if (newVal == Nil) {
                        @[node, *storeToken]!(val.delete(suffix)) |
                        // Return
                        ret!(Nil)
                      } else {
                        @[node, *storeToken]!(val.set(suffix, newVal)) |
                        // Return
                        ret!(Nil)
                      }
                    }
                  }
                } else {
                  // Otherwise make the rest of the path exist.
                  // Bit k set means child node k exists.
                  if ((val/powers.nth(nybList.nth(n))) % 2 == 0) {
                    // Child node missing
                    // Acquire the lock
                    for (@val <- @[node, *storeToken]) {
                      // Re-test value
                      if ((val/powers.nth(nybList.nth(n))) % 2 == 0) {
                        // Child node still missing
                        // Create node, set node to 0
                        MakeNode!(0, (map, nybList.slice(0, n + 1))) |
                        // Update current node to val | (1 << nybList.nth(n))
                        match nybList.nth(n) {
                          bit => {
                            // val | (1 << bit)
                            // Bitwise operators would be really nice to have!
                            // Release the lock
                            @[node, *storeToken]!((val % powers.nth(bit)) +
                              (val / powers.nth(bit + 1)) * powers.nth(bit + 1) +
                              powers.nth(bit))
                          }
                        } |
                        // Child node now exists, loop
                        TreeHashMapSetter!(map, nybList, n + 1, len, newVal, suffix, *ret)
                      } else {
                        // Child node created between reads
                        // Release lock
                        @[node, *storeToken]!(val) |
                        // Loop
                        TreeHashMapSetter!(map, nybList, n + 1, len, newVal, suffix, *ret)
                      }
                    }
                  } else {
                    // Child node exists, loop
                    TreeHashMapSetter!(map, nybList, n + 1, len, newVal, suffix, *ret)
                  }
                }
              }
            }
          }
        }
      } |

      contract TreeHashMap(@"set", @map, @key, @newVal, ret) = {
        new hashCh, nybListCh, keccak256Hash(`rho:crypto:keccak256Hash`) in {
          // Hash the key to get a 256-bit array
          keccak256Hash!(key.toByteArray(), *hashCh) |
          for (@hash <- hashCh) {
            for (@depth <<- @(map, "depth")) {
              // Get the bit list
              ByteArrayToNybbleList!(hash, 0, depth, [], *nybListCh) |
              for (@nybList <- nybListCh) {
                TreeHashMapSetter!(map, nybList, 0,  depth, newVal, hash.slice(depth, 32), *ret)
              }
            }
          }
        }
      } |

      contract TreeHashMapContains(@map, @nybList, @n, @len, @suffix, ret) = {
        // Look up the value of the node at [map, nybList.slice(0, n + 1)]
        new valCh in {
          nodeGet!((map, nybList.slice(0, n)), *valCh) |
          for (@val <- valCh) {
            if (n == len) {
              ret!(val.contains(suffix))
            } else {
              // See getter for explanation of formula
              if ((val/powers.nth(nybList.nth(n))) % 2 == 0) {
                ret!(false)
              } else {
                TreeHashMapContains!(map, nybList, n + 1, len, suffix, *ret)
              }
            }
          }
        }
      } |

      contract TreeHashMap(@"contains", @map, @key, ret) = {
        new hashCh, nybListCh, keccak256Hash(`rho:crypto:keccak256Hash`) in {
          // Hash the key to get a 256-bit array
          keccak256Hash!(key.toByteArray(), *hashCh) |
          for (@hash <- hashCh) {
            for (@depth <<- @(map, "depth")) {
              // Get the bit list
              ByteArrayToNybbleList!(hash, 0, depth, [], *nybListCh) |
              for (@nybList <- nybListCh) {
                TreeHashMapContains!(map, nybList, 0,  depth, hash.slice(depth, 32), *ret)
              }
            }
          }
        }
      } |

      contract TreeHashMapUpdater(@map, @nybList, @n, @len, update, @suffix, ret) = {
        // Look up the value of the node at [map, nybList.slice(0, n + 1)
        new valCh in {
          match (map, nybList.slice(0, n)) {
            node => {
              for (@val <<- @[node, *storeToken]) {
                if (n == len) {
                  // We're at the end of the path.
                  if (val == 0) {
                    // There's nothing here.
                    // Return
                    ret!(Nil)
                  } else {
                    new resultCh in {
                      // Acquire the lock on this node
                      for (@val <- @[node, *storeToken]) {
                        // Update the current value
                        update!(val.get(suffix), *resultCh) |
                        for (@newVal <- resultCh) {
                          // Release the lock
                          @[node, *storeToken]!(val.set(suffix, newVal)) |
                          // Return
                          ret!(Nil)
                        }
                      }
                    }
                  }
                } else {
                  // Otherwise try to reach the end of the path.
                  // Bit k set means child node k exists.
                  if ((val/powers.nth(nybList.nth(n))) % 2 == 0) {
                    // If the path doesn't exist, there's no value to update.
                    // Return
                    ret!(Nil)
                  } else {
                    // Child node exists, loop
                    TreeHashMapUpdater!(map, nybList, n + 1, len, *update, suffix, *ret)
                  }
                }
              }
            }
          }
        }
      } |
      contract TreeHashMap(@"update", @map, @key, update, ret) = {
        new hashCh, nybListCh, keccak256Hash(`rho:crypto:keccak256Hash`) in {
          // Hash the key to get a 256-bit array
          keccak256Hash!(key.toByteArray(), *hashCh) |
          for (@hash <- hashCh) {
            for (@depth <<- @(map, "depth")) {
              // Get the bit list
              ByteArrayToNybbleList!(hash, 0, depth, [], *nybListCh) |
              for (@nybList <- nybListCh) {
                TreeHashMapUpdater!(map, nybList, 0,  depth, *update, hash.slice(depth, 32), *ret)
              }
            }
          }
        }
      }
    }
  }
}