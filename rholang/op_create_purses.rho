new basket,
  returnCh,
  boxCh,
  stdout(`rho:io:stdout`),
  deployerId(`rho:rchain:deployerId`),
  registryLookup(`rho:registry:lookup`)
in {

  @(*deployerId, "rho:id:FROM_BOX_REGISTRY_URI")!(({ "type": "READ_SUPER_KEYS" }, *boxCh)) |

  for (superKeys <- boxCh) {
    match *superKeys.get(`rho:id:REGISTRY_URI`) {
      superKey => {
        @(superKey, "CREATE_PURSES")!((
          {
            // example
            // "purses": { "0": { "publicKey": "abc", "box": `rho:id:abc`, "type": "gold", "quantity": 3, "data": Nil }}
            "purses": CREATE_PURSESS,
            // example
            // "data": { "0": "this bag is mine" }
            "data": CREATE_PURSESS_DATA,
          },
          *returnCh
        ))
      }
    }
  } |

  for (resp <- returnCh) {
    match *resp {
      String => {
        basket!({ "status": "failed", "message": *resp }) |
        stdout!(("failed", *resp))
      }
      (true, payload) => {
        new entryCh, return2Ch, itCh in {
          registryLookup!(`rho:id:FROM_BOX_REGISTRY_URI`, *entryCh) |
          for (entry <- entryCh) {
            for (purses <= itCh) {
              match *purses {
                Nil => {
                  basket!({ "status": "failed", "message": "no purse" }) |
                  stdout!(("failed", "no purse"))
                }
                [last] => {
                  new readReturnCh, receivePurseReturnCh in {
                    @last!(("READ", Nil, *readReturnCh)) |
                    entry!((
                      "PUBLIC_RECEIVE_PURSE", {
                        "registryUri": `rho:id:REGISTRY_URI`,
                        "purse": last
                      }, *receivePurseReturnCh)
                    ) |
                    for (r <- receivePurseReturnCh) {
                      match *r {
                        String => {
                          basket!({ "status": "failed", "message": *r }) |
                          stdout!(("failed", *r))
                        }
                        _ => {
                          stdout!("completed, purses created and saved to box") |
                          basket!({ "status": "completed" })
                        }
                      }
                    }
                  }
                }
                [first ... rest] => {
                  new readReturnCh, receivePurseReturnCh in {
                    entry!(("PUBLIC_RECEIVE_PURSE", {
                      "registryUri": `rho:id:REGISTRY_URI`,
                      "purse": first
                    }, *receivePurseReturnCh)) |
                    for (r <- receivePurseReturnCh) {
                      match *r {
                        String => {
                          basket!({ "status": "failed", "message": *r }) |
                          stdout!(("failed", *r))
                        }
                        _ => { itCh!(rest) }
                      }
                    }
                  }
                }
              }
            } |
            itCh!(payload.get("purses"))
          }
        }
      }
    }
  }
}
